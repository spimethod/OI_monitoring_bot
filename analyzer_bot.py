import os
import time
import psycopg2
import asyncio
from datetime import datetime, timezone
from telegram import Bot

# --- –ì–õ–ê–í–ù–ê–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
DATABASE_URL = os.environ.get('DATABASE_URL')
TELEGRAM_BOT_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN')
TELEGRAM_CHAT_ID = os.environ.get('TELEGRAM_CHAT_ID')

# –ü–æ—Ä–æ–≥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–∞ (–±–µ—Ä–µ—Ç—Å—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10.0%)
# –°—Ä–∞–≤–Ω–∏–≤–∞—Ç—å—Å—è –±—É–¥–µ—Ç –ò–ó–ú–ï–ù–ï–ù–ò–ï (–¥–µ–ª—å—Ç–∞) —Ä–æ—Å—Ç–∞ OI
OI_DELTA_THRESHOLD = float(os.environ.get('OI_DELTA_THRESHOLD', 10.0))

# –ö–∞–∫ —á–∞—Å—Ç–æ –±–æ—Ç –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
CHECK_INTERVAL_SECONDS = 60 * 1 # –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

# --- –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –ë–ê–ó–û–ô –î–ê–ù–ù–´–• ---

def get_db_connection():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö PostgreSQL."""
    try:
        conn = psycopg2.connect(DATABASE_URL)
        return conn
    except Exception as e:
        print(f"[DB Error] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

def get_tokens_to_process(conn):
    """–ù–∞—Ö–æ–¥–∏—Ç —Ç–æ–∫–µ–Ω—ã, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å 2 –∏–ª–∏ –±–æ–ª–µ–µ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."""
    query = "SELECT token_symbol FROM oi_data GROUP BY token_symbol HAVING COUNT(*) >= 2;"
    try:
        with conn.cursor() as cur:
            cur.execute(query)
            tokens = [item[0] for item in cur.fetchall()]
            return tokens
    except Exception as e:
        print(f"[DB Error] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤: {e}")
        return []

def get_latest_records(conn, token_symbol):
    """–ü–æ–ª—É—á–∞–µ—Ç –î–í–ï —Å–∞–º—ã–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞."""
    query = "SELECT id, token_name, oi_growth_4h FROM oi_data WHERE token_symbol = %s ORDER BY scan_time DESC LIMIT 2;"
    try:
        with conn.cursor() as cur:
            cur.execute(query, (token_symbol,))
            records = cur.fetchall()
            if len(records) == 2:
                # records[0] - —Å–∞–º–∞—è –Ω–æ–≤–∞—è (current)
                # records[1] - –ø—Ä–µ–¥—ã–¥—É—â–∞—è (previous)
                return records[0], records[1] 
            return None, None
    except Exception as e:
        print(f"[DB Error] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–ø–∏—Å–∏ –¥–ª—è {token_symbol}: {e}")
        return None, None

def cleanup_old_records(conn, newest_record_id, token_symbol):
    """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è —Ç–æ–∫–µ–Ω–∞, –ö–†–û–ú–ï —Å–∞–º–æ–π –Ω–æ–≤–æ–π."""
    query = "DELETE FROM oi_data WHERE token_symbol = %s AND id != %s;"
    try:
        with conn.cursor() as cur:
            cur.execute(query, (token_symbol, newest_record_id))
            deleted_count = cur.rowcount
            conn.commit()
            if deleted_count > 0:
                print(f"[DB] –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ {deleted_count} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è {token_symbol}.")
    except Exception as e:
        print(f"[DB Error] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è {token_symbol}: {e}")
        conn.rollback()

# --- –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –û–¢–ü–†–ê–í–ö–ò –í TELEGRAM ---

async def send_telegram_alert(message):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram."""
    try:
        bot = Bot(token=TELEGRAM_BOT_TOKEN)
        await bot.send_message(chat_id=TELEGRAM_CHAT_ID, text=message, parse_mode='Markdown')
        print(f"[Telegram] –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.")
    except Exception as e:
        print(f"[Telegram Error] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {e}")

# --- –û–°–ù–û–í–ù–û–ô –¶–ò–ö–õ –ê–ù–ê–õ–ò–ó–ê–¢–û–†–ê (PULL-–ú–û–î–ï–õ–¨) ---
if __name__ == "__main__":
    print("--- –ó–ê–ü–£–°–ö –°–ï–†–í–ò–°–ê-–ê–ù–ê–õ–ò–ó–ê–¢–û–†–ê –î–ò–ù–ê–ú–ò–ö–ò OI (v2.1 - –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ) ---")
    
    if not all([DATABASE_URL, TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID]):
        print("[CRITICAL] –ù–µ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (DATABASE_URL, TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID) —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
    else:
        while True:
            print(f"\n--- {datetime.now(timezone.utc).strftime('%Y-%m-%d %H:%M:%S')} | –ù–∞—á–∞–ª–æ —Ü–∏–∫–ª–∞ –∞–Ω–∞–ª–∏–∑–∞ ---")
            conn = get_db_connection()
            if conn:
                tokens_to_process = get_tokens_to_process(conn)
                print(f"–ù–∞–π–¥–µ–Ω–æ {len(tokens_to_process)} —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")

                for token in tokens_to_process:
                    current_record, previous_record = get_latest_records(conn, token)
                    
                    if current_record and previous_record:
                        current_id, current_name, current_oi = current_record
                        prev_id, _, prev_oi = previous_record

                        # –í—ã—á–∏—Å–ª—è–µ–º –¥–µ–ª—å—Ç—É (—Ä–∞–∑–Ω–∏—Ü—É)
                        oi_delta = current_oi - prev_oi

                        print(f"  > –ê–Ω–∞–ª–∏–∑ {token}: –¢–µ–∫—É—â–∏–π —Ä–æ—Å—Ç OI {current_oi:.2f}%, –ü—Ä–µ–¥—ã–¥—É—â–∏–π {prev_oi:.2f}%. –î–µ–ª—å—Ç–∞: {oi_delta:.2f}%")
                        
                        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –î–ï–õ–¨–¢–£ —Å –ø–æ—Ä–æ–≥–æ–º
                        if oi_delta >= OI_DELTA_THRESHOLD:
                            message = (
                                f"üöÄ *–ê–ª–µ—Ä—Ç –ø–æ –£–°–ö–û–†–ï–ù–ò–Æ —Ä–æ—Å—Ç–∞ OI* üöÄ\n\n"
                                f"–¢–æ–∫–µ–Ω: *{current_name} ({token})*\n\n"
                                f"üî• –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ—Å—Ç–∞ OI –∑–∞ 4 —á–∞—Å–∞: *{oi_delta:+.2f}%*\n"
                                f"_(–¢–µ–∫—É—â–∏–π —Ä–æ—Å—Ç: {current_oi:.2f}%, –ü—Ä–µ–¥—ã–¥—É—â–∏–π: {prev_oi:.2f}%)_"
                            )
                            asyncio.run(send_telegram_alert(message))
                        
                        # –£–¥–∞–ª—è–µ–º –í–°–ï –∑–∞–ø–∏—Å–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–∫–µ–Ω–∞, –∫—Ä–æ–º–µ —Å–∞–º–æ–π –ø–æ—Å–ª–µ–¥–Ω–µ–π
                        cleanup_old_records(conn, current_id, token)

                conn.close()

            print(f"--- –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ {CHECK_INTERVAL_SECONDS / 60:.0f} –º–∏–Ω. ---")
            time.sleep(CHECK_INTERVAL_SECONDS)