import os
import time
import psycopg2
import asyncio
from datetime import datetime, timezone
from telegram import Bot

# --- –ì–õ–ê–í–ù–ê–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
DATABASE_URL = os.environ.get('DATABASE_URL')
TELEGRAM_BOT_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN')
TELEGRAM_CHAT_ID = os.environ.get('TELEGRAM_CHAT_ID')
OI_DELTA_THRESHOLD = float(os.environ.get('OI_DELTA_THRESHOLD', 10.0))

# --- –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –ë–ê–ó–û–ô –î–ê–ù–ù–´–• ---

def get_db_connection():
    try:
        conn = psycopg2.connect(DATABASE_URL)
        return conn
    except Exception as e:
        print(f"[DB Error] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

def get_tokens_to_process(conn):
    query = "SELECT token_symbol FROM oi_data GROUP BY token_symbol HAVING COUNT(*) >= 2;"
    try:
        with conn.cursor() as cur:
            cur.execute(query)
            tokens = [item[0] for item in cur.fetchall()]
            return tokens
    except Exception as e:
        print(f"[DB Error] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤: {e}")
        return []

def get_latest_records(conn, token_symbol):
    query = "SELECT id, token_name, oi_growth_4h, scan_time FROM oi_data WHERE token_symbol = %s ORDER BY scan_time DESC LIMIT 2;"
    try:
        with conn.cursor() as cur:
            cur.execute(query, (token_symbol,))
            records = cur.fetchall()
            if len(records) == 2:
                return records[0], records[1] # [0] = current, [1] = previous
            return None, None
    except Exception as e:
        print(f"[DB Error] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–ø–∏—Å–∏ –¥–ª—è {token_symbol}: {e}")
        return None, None

def cleanup_old_records(conn, previous_record_time, token_symbol):
    query = "DELETE FROM oi_data WHERE token_symbol = %s AND scan_time < %s;"
    try:
        with conn.cursor() as cur:
            cur.execute(query, (token_symbol, previous_record_time))
            deleted_count = cur.rowcount
            conn.commit()
            if deleted_count > 0:
                print(f"[DB] –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ {deleted_count} –ø–æ–∑–∞–ø—Ä–æ—à–ª—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è {token_symbol}.")
    except Exception as e:
        print(f"[DB Error] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏: {e}")
        conn.rollback()

# --- –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –û–¢–ü–†–ê–í–ö–ò –í TELEGRAM ---

async def send_telegram_alert(message):
    try:
        bot = Bot(token=TELEGRAM_BOT_TOKEN)
        await bot.send_message(chat_id=TELEGRAM_CHAT_ID, text=message, parse_mode='Markdown')
        print(f"[Telegram] –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.")
    except Exception as e:
        print(f"[Telegram Error] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {e}")

# --- –û–°–ù–û–í–ù–û–ô –¶–ò–ö–õ –ê–ù–ê–õ–ò–ó–ê–¢–û–†–ê (PUSH-–ú–û–î–ï–õ–¨) ---
if __name__ == "__main__":
    print("--- –ó–ê–ü–£–°–ö –°–ï–†–í–ò–°–ê-–ê–ù–ê–õ–ò–ó–ê–¢–û–†–ê –î–ò–ù–ê–ú–ò–ö–ò OI (PUSH-–ú–û–î–ï–õ–¨) ---")
    
    if not all([DATABASE_URL, TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID]):
        print("[CRITICAL] –ù–µ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
    else:
        listener_conn = get_db_connection()
        if listener_conn:
            listener_conn.autocommit = True
            cursor = listener_conn.cursor()
            cursor.execute("LISTEN new_data_event;")
            print("[DB] –°–ª—É—à–∞—é –∫–∞–Ω–∞–ª 'new_data_event'...")

            while True:
                # –ñ–¥–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                listener_conn.poll()
                while listener_conn.notifies:
                    notification = listener_conn.notifies.pop(0)
                    print(f"\n--- {datetime.now(timezone.utc).strftime('%Y-%m-%d %H:%M:%S')} | –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª NOTIFY! ---")
                    
                    analysis_conn = get_db_connection()
                    if analysis_conn:
                        tokens_to_process = get_tokens_to_process(analysis_conn)
                        print(f"–ù–∞–π–¥–µ–Ω–æ {len(tokens_to_process)} —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")

                        for token in tokens_to_process:
                            current_record, previous_record = get_latest_records(analysis_conn, token)
                            if current_record and previous_record:
                                current_id, current_name, current_oi, _ = current_record
                                prev_id, _, prev_oi, prev_time = previous_record

                                oi_delta = current_oi - prev_oi
                                print(f"  > –ê–Ω–∞–ª–∏–∑ {token}: –¢–µ–∫—É—â–∏–π —Ä–æ—Å—Ç OI {current_oi:.2f}%, –ü—Ä–µ–¥—ã–¥—É—â–∏–π {prev_oi:.2f}%. –î–µ–ª—å—Ç–∞: {oi_delta:.2f}%")
                                
                                if current_oi >= OI_DELTA_THRESHOLD:
                                    message = (
                                        f"üöÄ *–ê–ª–µ—Ä—Ç –ø–æ —Ä–æ—Å—Ç—É OI* üöÄ\n\n"
                                        f"–¢–æ–∫–µ–Ω: *{current_name} ({token})*\n\n"
                                        f"üî• –†–æ—Å—Ç OI –∑–∞ 4 —á–∞—Å–∞: *{current_oi:.2f}%*\n"
                                        f"_(–ü—Ä–µ–¥—ã–¥—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {prev_oi:.2f}%)_\n"
                                        f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ (–¥–µ–ª—å—Ç–∞): *{oi_delta:+.2f}%*"
                                    )
                                    asyncio.run(send_telegram_alert(message))
                                
                                cleanup_old_records(analysis_conn, prev_time, token)
                        
                        analysis_conn.close()
                
                time.sleep(1) # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞, —á—Ç–æ–±—ã –Ω–µ –Ω–∞–≥—Ä—É–∂–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä